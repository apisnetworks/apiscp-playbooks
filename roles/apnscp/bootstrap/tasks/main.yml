---
- name: Verify apnscp bootstrapper completed
  stat: path={{ apnscp_root }}/resources/apnscp.ca
  register: s
- fail:
    msg: "apnscp bootstrapper isn't completed properly"
  when: not s.stat.exists

- template: src=templates/apnscp.init.j2 dest=/etc/systemd/user/apnscp.init mode=755 backup=no
- template: src=templates/apnscp.service.j2 dest=/etc/systemd/system/apnscp.service mode=644
  register: copied
- template: src=templates/apnscp.sysconf.j2 dest=/etc/sysconfig/apnscp force=no backup=yes
- systemd: daemon_reload=yes enabled=yes name=apnscp
  when: copied.changed
- include_tasks: set-platform-version.yml 
  vars:
    version: "{{ apnscp_platform_version }}"

- name: Create shared filesystem slice {{ apnscp_shared_root }}
  file: 
    path: "{{ apnscp_shared_root }}"
    mode: 0711
    state: directory
  register: dir_created

- include_tasks: "set-config.yml" 
  vars: 
    section: core 
    option: filesystem_shared 
    value: "{{ apnscp_shared_root }}"
    
- include_tasks: set-config.yml
  vars: 
    section: cron
    option: low_memory
    value: true
  when: has_low_memory

- include_tasks: set-config.yml
  vars: 
    section: "{{ item.section }}"
    option: "{{ item.option }}"
    value: "{{ item.value }}"
  with_items:
    - section: ssh
      option: user_daemons
      value: "{{ user_daemons }}"
    - section: apnscpd
      option: headless
      value: "{{ panel_headless }}"

- name: Create apnscp user {{ apnscp_system_user }}
  user: 
    home: "{{ apnscp_root }}/storage"
    createhome: no
    shell: /sbin/nologin
    name: "{{ apnscp_system_user }}"
    comment: "apnscp System User"
    system: yes
    state: present
  register: system_user_created

- name: Set apnscp user in config.ini
  ini_file:
    owner: "{{ apnscp_system_user }}"
    path: "{{apnscp_root}}/config/custom/config.ini"
    section: core
    option: apnscp_system_user
    value: "{{ apnscp_system_user }}"

- file: path=/var/log/bw state=directory
- file: path=/etc/virtualhosting state=directory mode=0700 owner="{{ apnscp_system_user }}"
- file: path=/etc/opcenter/webhost state=directory mode=0700 owner="{{ apnscp_system_user }}"

- include_vars: "vars/opcenter-links.yml"
- name: Link opcenter resources to /etc
  include_tasks: create-link-opcenter-controls.yml 
  vars:
    path: "{{ item.path }}"
    src: "{{item.src}}"
  with_items: "{{ opcenter_links }}"

- stat: path="{{ apnscp_root }}/config/httpd-custom.conf"
  register: httpdchk
- copy:
    content: |
      ServerName {{ apnscp_fqdn | default(ansible_nodename) }}
      User {{ apnscp_system_user }}
      Group {{ apnscp_system_user }}
      Use VHost {{ apnscp_ip4_address | default(ansible_default_ipv4.address) }} 
    dest: "{{ apnscp_root }}/config/httpd-custom.conf"
    owner: "{{ apnscp_system_user }}"
    group: "{{ apnscp_system_user }}"
  when: not httpdchk.stat.exists

- include_tasks: "set-config.yml" 
  vars:
    section: crm 
    option: "{{ item.option }}" 
    value: "{{ item.value }}"
    check_value: false
  with_items:
    - option: from_address
      value: "{{ apnscp_system_user }}@{{ apnscp_hostname }}"
    - option: from_no_reply_address
      value: "{{ apnscp_system_user }}@{{ apnscp_hostname }}"
    - option: reply_address
      value: "{{ apnscp_system_user }}+tickets@{{ apnscp_hostname }}"

- name: "Set cookie secret"
  include_tasks: "set-config.yml"
  vars:
    section: auth
    option: secret
    value: "{{ cookie_secret }}"
    check_value: false
    
- stat: path="{{ apnscp_root }}/storage/opcenter/namebased_ip_addrs"
  register: nbchk
- copy:
    content: "{{ apnscp_ip4_address | default([ansible_default_ipv4.address]) | join('\n') }}"
    dest: "{{ apnscp_root }}/storage/opcenter/namebased_ip_addrs"
  when: not nbchk.stat.exists or nbchk.stat.size == 0
  notify: Restart virtualhosting
- stat: path="{{ apnscp_root }}/storage/opcenter/namebased_ip6_addrs"
  register: nbchk
- block: 
    - copy:
        content: "{{ apnscp_ip6_address | default([ansible_default_ipv6.address]) | join('\n') }}"
        dest: "{{ apnscp_root }}/storage/opcenter/namebased_ip6_addrs"
      notify: Restart virtualhosting
    - include_tasks: set-config.yml
      vars:
        section: dns
        option: my_ip6
        value: "{{ apnscp_ip6_address | default(ansible_default_ipv6.address) }}"
  when: >
    (not nbchk.stat.exists or nbchk.stat.size == 0) and 
    ansible_default_ipv6 is defined and ansible_default_ipv6.has_key('address')
- stat: path="{{ apnscp_root }}/storage/opcenter/interface"
  register: stif
- copy:
    content: "{{ apnscp_interface | default(ansible_default_ipv4.interface) }}"
    dest: "{{ apnscp_root }}/storage/opcenter/interface"
  when: not stif.stat.exists or stif.stat.size == 0
- name: Assign UUID
  include_tasks: "set-config.yml" 
  vars:
    section: dns
    option: uuid 
    value: "{{ 999999999999999999999 | random | string + (lookup('pipe', 'date +%s%N')) | to_uuid() }}"
    check_value: false
  when: not data_center_mode
- name: Copy /etc/resolv.conf config to config.ini
  set_fact: 
    nameservers: "{{ (nameservers | default([])) + [item]}}"
  with_lines: "egrep '^\\s*nameserver\\b' /etc/resolv.conf | cut -d' ' -f2"
  when: apnscp_nameservers is not defined
- include_tasks: set-config.yml
  vars:
    section: "dns"
    option: recursive_ns
    value: "{{ nameservers | join(',')}}"
    check_value: yes
  when: apnscp_nameservers is not defined
# Ensure apnscp ownership is correct
- name: Change apnscp ownership
  command: chown -c -R {{ apnscp_system_user }}:{{ apnscp_system_user }} {{ apnscp_root }}
  register: o
  changed_when: o.stdout != "" and apnscp_notify_ownership_change
