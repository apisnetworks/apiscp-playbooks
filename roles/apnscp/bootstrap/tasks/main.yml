---
- name: Verify apnscp bootstrapper completed
  stat: path={{ apnscp_root }}/resources/apnscp.ca
  register: s
- fail:
    msg: "apnscp bootstrapper isn't completed properly"
  when: not s.stat.exists

- copy: src=templates/apnscp.init dest=/etc/systemd/user mode=755 backup=yes
- copy: src=templates/apnscp.service dest=/etc/systemd/system mode=644
  register: copied
- systemd: daemon_reload=yes enabled=yes name=apnscp
  when: copied.changed

- name: Create shared filesystem slice {{ apnscp_shared_root }}
  file: 
    path: "{{ apnscp_shared_root }}"
    mode: 0711
    state: directory
  register: dir_created
- include_tasks: "set-config.yml" 
  vars: 
    section: core 
    option: filesystem_shared 
    value: "{{ apnscp_shared_root }}"

- name: Create apnscp user {{ apnscp_system_user }}
  user: 
    home: "{{ apnscp_root }}/storage"
    createhome: no
    shell: /sbin/nologin
    name: "{{ apnscp_system_user }}"
    comment: "apnscp System User"
    system: yes
    state: present
  register: system_user_created
# Ensure apnscp ownership is correct
- command: /bin/true
  notify: Change apnscp ownership

- ini_file:
    owner: "{{ apnscp_system_user }}"
    path: "{{apnscp_root}}/config/custom/config.ini"
    section: core
    option: apnscp_system_user
    value: "{{ apnscp_system_user }}"
- include_tasks: "set-config.yml" 
  vars:
    section: crm 
    option: "{{ item.option }}" 
    value: "{{ item.value }}"
    check_value: false
  with_items:
    - option: from_address
      value: "{{ apnscp_system_user }}@${HOSTNAME}"
    - option: from_no_reply_address
      value: "{{ apnscp_system_user }}@${HOSTNAME}"
    - option: reply_address
      value: "{{ apnscp_system_user }}+tickets@${HOSTNAME}"

- file: path=/var/log/bw state=directory
- file: path=/etc/virtualhosting state=directory mode=0700 owner="{{ apnscp_system_user }}"
- file: path=/etc/opcenter/webhost state=directory mode=0700 owner="{{ apnscp_system_user }}"

- include_vars: "vars/opcenter-links.yml"
- name: Link opcenter resources to /etc
  include_tasks: create-link-opcenter-controls.yml path="{{ item.path }}"  src="{{item.src}}"
  with_items: "{{ opcenter_links }}"

- stat: path="{{ apnscp_root }}/config/httpd-custom.conf"
  register: httpdchk
- copy:
    content: >
      User {{ apnscp_system_user }}
      Group {{ apnscp_system_user }}
      Use Vhost {{ apnscp_ip4_address | default(ansible_default_ipv4.address) }} 
    dest: "{{ apnscp_root }}/config/httpd-custom.conf"
    owner: "{{ apnscp_system_user }}"
    group: "{{ apnscp_system_user }}"
  when: not httpdchk.stat.exists
- stat: path="{{ apnscp_root }}/config/custom/namebased_ip_addrs"
  register: nbchk
- copy:
    content: "{{ apnscp_ip4_address | default(ansible_default_ipv4.address) }}"
    dest: "{{ apnscp_root }}/config/custom/namebased_ip_addrs"
  when: not nbchk.stat.exists

- stat: path="{{ apnscp_root }}/config/custom/namebased_ip6_addrs"
  register: nbchk
- block: 
    - copy:
        content: "{{ apnscp_ip6_address | default(ansible_default_ipv6.address) }}"
        dest: "{{ apnscp_root }}/config/custom/namebased_ip6_addrs"
    - include_tasks: set-config.yml
      vars:
        section: dns
        option: my_ip6
        value: "{{ apnscp_ip6_address | default(ansible_default_ipv6.address) }}"
  when: >
    not nbchk.stat.exists and 
    ansible_default_ipv6 is defined and ansible_default_ipv6.has_key('address')

- meta: flush_handlers