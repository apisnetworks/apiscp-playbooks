---
- set_fact:
    __apnscp_password: "{{ apnscp_password }}"
    __appliance_password: "{{ appliance_password}}"
- stat: path="{{ apnscp_db_config }}"
  register: exists
# Override random passwords if config exists
- block:
  - set_fact:
      oldconfig: "{{ lookup('file', apnscp_db_config ) | from_yaml }}"
  - set_fact:
      exists: {stat: {exists: false} }
    # db.yaml.dist leaves field empty
    when: not 'password' in oldconfig['apnscp'] or not oldconfig['apnscp']['password']
  - set_fact: 
      __apnscp_password: "{{ oldconfig['apnscp']['password'] }}"
      __appliance_password: "{{ oldconfig['appldb']['password'] }}"
  when: exists.stat.exists
- file: path="{{ apnscp_db_config}}" state=touch
  when: not exists.stat.exists

- name: Verify {{ apnscp_db }} database exists
  mysql_db: 
    name: "{{ apnscp_db }}"
    state: present
  register: exists
- name: Create {{ apnscp_db }} database
  mysql_db: 
    name: "{{ apnscp_db }}" 
    state: import 
    config_file: /root/.my.cnf 
    target: "{{ role_path }}/files/mysql/apnscp.sql"
  when: exists.changed

- name: Verify {{ apnscp_user }} user exists
  mysql_user:
    name: "{{ apnscp_user }}"
    password: "{{__apnscp_password}}"
    priv: "{{apnscp_db}}.*:ALL"
    host: localhost
    state: present
  register: user_exists

- include_role: name=common/merge-yaml-config
  vars:
    file: "{{apnscp_db_config}}"
    position: "{{ db_config_name }}"
    items:
      - {'user': "{{apnscp_user}}"}
      - {'password': "{{__apnscp_password}}"}
      - {'host': "localhost"}
      - {'database': "{{ apnscp_db }}"}
  with_items: "{{ db_population_names }}"
  loop_control:
    loop_var: db_config_name
  when: user_exists.changed

- block:
  - name: Verify {{ appliance_user }} user exists
    become_user: postgres
    become: yes
    postgresql_user:
      role_attr_flags: SUPERUSER
      name: "{{ appliance_user }}"
      encrypted: yes
      password: "{{__appliance_password}}"
      state: present
    register: user_exists

  - name: Verify {{ appliance_db }} database exists
    postgresql_db: 
      name: "{{ appliance_db}}"
      owner: "{{ appliance_user }}"
      template: template1
      state: present
    register: db_exists

  - name: Create {{ appliance_db }} database
    block:
      - tempfile:
          path: /tmp
          state: file
          prefix: appldb
        register: temp
      - template:
          src: "{{ role_path }}/files/pgsql/appldb.sql.j2"
          dest: "{{ temp.path }}"
      - postgresql_db: 
          name: "{{ appliance_db}}"
          state: restore
          target: "{{ temp.path }}"
          owner: "{{ appliance_user }}"
          login_password: "{{ __appliance_password }}"
          login_user: "{{appliance_user}}"
          login_host: 127.0.0.1
      - file:
          path: "{{ temp.path }}"
          state: absent
    when: db_exists.changed

  - name: Verify {{appliance_user}} grants
    postgresql_privs:
      db: template1
      privs: ALL
      obj: "{{ appliance_db }}"
      role: "{{ appliance_user }}"
      type: database
      state: present 
  become_user: postgres
  become: yes

- include_role: name=common/merge-yaml-config
  vars:
      file: "{{ apnscp_db_config}}"
      position: "{{ appliance_db}}"
      items:
        - {'user': "{{appliance_user}}"}
        - {'password': "{{__appliance_password}}"}
        - {'host': "localhost"}
        - {'database': "{{ appliance_db }}"}
  when: user_exists.changed
