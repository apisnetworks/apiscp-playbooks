- name: Initialize FILESYSTEMTEMPLATE
  file:
    path: "{{apnscp_filesystem_template}}"
    state: directory
- name: Verify purity of FILESYSTEMTEMPLATE
  stat: path="{{ apnscp_filesystem_template_purity_marker }}"
  register: fst_pure
- name: "Restrict snooping on {{ apnscp_account_root }}"
  file:
    path: "{{ apnscp_account_root }}"
    state: directory
    mode: 0711
- ini_file:
    path: "{{apnscp_root}}/config/custom/config.ini"
    section: core
    option: filesystem_template
    value: "{{ apnscp_filesystem_template }}"
- set_fact: __populate_filesystem_template=false
- set_fact: __populate_filesystem_template=true
  when: >
    populate_filesystem_template == "auto" and not fst_pure.stat.exists or
    (populate_filesystem_template | bool) and populate_filesystem_template != "auto"

- include_role: role="packages/install" tasks_from="configure-default-vars.yml"
- block:
  - name: Install unconditional packages
    include_tasks: install-package.yml
    vars:
      service: "{{ item.service }}"
      package: "{{ lookup('items', item.packages) | rejectattr('when', 'defined') | map(attribute='name') | list | join(' ') }}"
      # Handler could make this tricky...
    with_items: "{{ apnscp_fst_packages }}"

  - name: Install unconditional packages
    include_tasks: "install-conditional-packages.yml"
    vars:
      service: "{{ item.service }}"
      packages: "{{ item.packages }}"
    with_items: "{{ apnscp_fst_packages }}"

  when: item.when | default(true) and __populate_filesystem_template

- name: "Build synchronizer RPM index"
  command: "{{ synchronizer }} generate"
  when: __populate_filesystem_template
# Ensure rsyslog log device is propagated
- stat: path={{ apnscp_shared_root }}/log
  register: st
- command: /bin/true
  notify: Restart rsyslog
  when: not st.stat.exists
# @TODO debugging crap?
- meta: flush_handlers
- include_tasks: "relocate-shared-directory.yml"
  vars:
    service: "{{ item.service }}"
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    logrotate_vars: "{{ item.logrotate_vars | default(None) }}"
    force: "{{ item.force | default(false) }}"
  with_items: "{{ relocated_paths }}"

- name: "Link /proc to {{ apnscp_shared_root }}"
  file:
    path: "{{ apnscp_filesystem_template }}/siteinfo/proc"
    src: "{{ apnscp_shared_root }}/proc"
    state: link
    force: yes

- include_role: name=apnscp/bootstrap tasks_from="set-platform-version.yml"
  vars:
    version: "{{apnscp_platform_version}}"
- name: "Setup /dev on {{ apnscp_filesystem_template }}"
  include_tasks: setup-dev.yml
- name: "Replace /bin/hostname"
  copy:
    content: |
      #!/bin/sh
      cat /etc/HOSTNAME
    dest: "{{ apnscp_filesystem_template }}/siteinfo/bin/hostname"
    mode: 0755
# Call after initialization otherwise trigger to create basic directories fails

- name: Create mount point for {{ apnscp_shared_root }} on siteinfo
  file:
    path: "{{ apnscp_filesystem_template }}/siteinfo{{ apnscp_shared_root }}"
    state: directory
    mode: 0711
- file:
    path: "{{ apnscp_filesystem_template }}/siteinfo/home"
    state: directory
    mode: 0755

- name: Copy files only once
  include_tasks: oneshot-files.yml
  with_items: "{{ oneshot_files }}"
  loop_control:
    label: "Copy {{ item.file }} to {{ item.service | default('siteinfo') }}"

- name: Remove GROUP= configuration from useradd
  ini_file:
    path: "{{ apnscp_filesystem_template }}/siteinfo/etc/default/useradd"
    section: null
    option: GROUP
    state: absent
# Squelch warnings on user creation
- name: Disable CREATE_MAIL_SPOOL in useradd
  ini_file:
    path: "{{ apnscp_filesystem_template }}/siteinfo/etc/default/useradd"
    section: null
    option: CREATE_MAIL_SPOOL
    value: "no"
# Needed for quota reporting. Alternative is to not jail Dovecot
- name: "Link {{ ansible_mounts | json_query('[?mount==`/`] | [0].device') }}"
  synchronize:
    src: "{{ ansible_mounts | json_query('[?mount==`/`] | [0].device') }}"
    dest: "{{ apnscp_filesystem_template }}/siteinfo/dev"
    archive: yes
    times: false
- name: Verify /etc/mtab in FST
  stat: path="{{ apnscp_filesystem_template }}/siteinfo/etc/mtab"
  register: st
- name: Remove /etc/mtab in FST
  file: path="{{ apnscp_filesystem_template }}/siteinfo/etc/mtab" state=absent
  when: st.stat.islnk is defined and st.stat.islnk
- name: Populate /etc/mtab
  copy:
    content: >
      {{ ansible_mounts | json_query('[?mount==`/`] | [0].device') }}
      {{ ansible_mounts | json_query('[?mount==`/`] | [0].mount') }}
      {{ ansible_mounts | json_query('[?mount==`/`] | [0].fstype') }}
      {{ ansible_mounts | json_query('[?mount==`/`] | [0].options') }}
      0 0
    dest: "{{ apnscp_filesystem_template }}/siteinfo/etc/mtab"
    force: no

# And for MySQL...
- name: Create mysql socket parent directory
  file:
    path: "{{ mysql_shared_path | dirname }}"
    state: directory
    owner: mysql
    group: mysql
    mode: 0711
- name: Reconfigure mysql to use "{{ apnscp_shared_root }}/mysql.sock"
  ini_file:
    path: /etc/my.cnf.d/apnscp.cnf
    section: "{{ item }}"
    option: socket
    value: "{{ mysql_shared_path }}"
    state: present
    no_extra_spaces: yes
  notify: Restart mariadb
  with_items:
    - mysqld
    - client
- file:
    path: "{{ apnscp_filesystem_template }}/siteinfo/var/lib/mysql"
    state: directory
    owner: mysql
    group: mysql
    mode: 02751
- meta: flush_handlers
- wait_for:
    path: "{{ mysql_shared_path }}"
    state: present
    timeout: 60
- file:
    path: "{{ apnscp_filesystem_template }}/siteinfo/var/lib/mysql/mysql.sock"
    src: "{{ mysql_shared_path }}"
    state: link
- name: Install mysql socket in system path
  file:
    path: /var/lib/mysql/mysql.sock
    src: "{{ mysql_shared_path }}"
    state: link
    force: yes
- name: Copy apnscp profile aliases
  template:
    src: templates/apnscp.sh.j2
    dest: "{{ apnscp_filesystem_template }}/ssh/etc/profile.d/apnscp.sh"
- name: Touch filesystem purity marker
  file: state=touch path="{{ apnscp_filesystem_template_purity_marker }}"
  when: not fst_pure.stat.exists
