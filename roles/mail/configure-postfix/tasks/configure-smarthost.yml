---
- name: "Check for existence of {{ postfix_smarthost_auth_file }}"
  stat: path="{{ postfix_smarthost_auth_file }}"
  register: o
- name: "Create {{ postfix_smarthost_auth_file }}"
  file: path="{{ postfix_smarthost_auth_file }}" state=touch
  when: not o.stat.exists
- name: "Ensure {{ credentials.host }} in {{ postfix_smarthost_auth_file }}"
  lineinfile:
    path: "{{ postfix_smarthost_auth_file }}"
    regexp: '^\s*{{ credentials.host | regex_escape }}\s+'
    state: present
    line: '{{credentials.host}} '
- name: "Add credentials + assert permissions in {{ postfix_smarthost_auth_file }}"
  replace:
    mode: 0600
    owner: root
    group: root
    path: "{{ postfix_smarthost_auth_file }}"
    # @todo return to matching when not sick
    # need atomic grouping to force match username present but password absent
    # if password specified; current regex misses this
    regexp: '^\s*{{ credentials.host | regex_escape }}\s+(?!{{ credentials.username | regex_escape}}(?::{{ credentials.password | regex_escape}}|)\s*$).*$'
    replace: "{{ credentials.host }}  {{ credentials.username }}:{{ credentials.password }}"
  no_log: true
  register: r
- name: "Create hash DB for  {{ postfix_smarthost_auth_file }}"
  command: >
    postmap {{ postfix_smarthost_auth_file | quote }}
  when: r.changed
