# RPM
rspamd_experimental: false
rspamd_rpm_url: "https://rspamd.com/rpm{{ rspamd_experimental | ternary('', '-stable') }}/{{ ansible_distribution == 'Fedora' | ternary('fedora', 'centos') }}-{{ansible_distribution_major_version}}/rspamd.repo"
rspamd_repo: /etc/yum.repos.d/rspamd.repo

rspamd_config_dir: /etc/rspamd
rspamd_local_config_dir: "{{ rspamd_config_dir }}/local.d"
rspamd_user: _rspamd

# Change to a higher count if more CPUs. Cannot infer from 
# has_low_memory or CPU count, which forces type to string (and bombs JSON).
# https://github.com/ansible/ansible/issues/30366
rspamd_worker_process_count: 1

# Redis configuration
# Enable redis for rspamd
rspamd_redis_enabled: "{{ not has_low_memory }}"
# Give an absolute path to use a UNIX socket + install service
rspamd_redis_server: "/var/lib/rspamd/redis.sock"
rspamd_redis_service: "{{ rspamd_redis_server.find('/') == 0 }}"
rspamd_redis_config: "{{ rspamd_local_config_dir }}/redis-server.conf"
rspamd_redis_user: "{{ rspamd_user }}"
rspamd_redis_pid_file: "/var/lib/rspamd/redis.pid"
# Database storage
rspamd_redis_dir: /var/lib/rspamd/redis
rspamd_redis_vars: 
  bind: "127.0.0.1"
  daemonize: "yes"
  unixsocketperm: "0600"
  port: 0
  "protected-mode": "no"
  pidfile: "{{ rspamd_redis_pid_file }}"
  unixsocket: "{{ (rspamd_redis_server.find('/') == 0) |  ternary(rspamd_redis_server, omit) }}"
  dir: "{{ rspamd_redis_dir }}"
# rspamd milter 
rspamd_proxy_port: 10003
rspamd_proxy_host: localhost
# Filter mail that originates from sendmail or PHP mail() function
rspamd_filter_outbound: true
# filter mail that comes from the server as well as SRS forwards
rspamd_filter_origination: true

#############
# Learning
#############
# piggyback off results from spamassassin to train algorithm
rspamd_passive_learning_mode: "{{ rspamd_method == 'piggyback' | default(false) }}"

# Suitable for low-volume environments
rspamd_use_spamassassin_rules: true
# Learns roughly half of ham in a trained database
rspamd_learn_piggyback_threshold: -1
rspamd_spamassassin_rules_dir: "/var/lib/spamassassin/3.004002/updates_spamassassin_org"

# Enable neural training. CPU intensive
rspamd_enable_neural_training: "{{ (not has_low_memory or data_center_mode) and rspamd_redis_enabled }}"
# Valid values: standalone, piggyback. 
# Setting spamfilter in apnscp-vars.yml to spamassassin implies piggyback
# "piggyback" will feed off SA data
rspamd_method: "{{ spamfilter == 'spamassassin' | ternary('piggyback', 'standalone') }}"

# 13.19 is approximately 15% percentile with a trained data set
# n = 532, mu = 18.90, s = 5.39
rspamd_reject_score: "{{ rspamd_learn_piggyback_threshold | ternary(25, 13.2) }}"
rspamd_greylist_score: 6
rspamd_add_header_score: 2

rspamd_learn_command: /usr/bin/rspamc
rspamd_learn_spam: "{{ rspamd_learn_command }} learn_spam"
rspamd_learn_ham: "{{ rspamd_learn_command }} learn_ham"

maildrop_files:
  - "{{ (apnscp_account_root + '/site*/fst/etc/maildroprc') | fileglob }}"
  - "{{ apnscp_filelists }}/siteinfo/etc/maildroprc"

##############
# Postfix main.cf configuration
##############
postfix_config:
  # All inbound and forwarded mail
  smtpd_milters: "{{ rspamd_enabled | ternary('inet:' + rspamd_proxy_host + ':' + rspamd_proxy_port|string, None) }}"
  milter_default_action: accept
  # Locally originating mail with sendmail
  non_smtpd_milters: "{{ rspamd_enabled and rspamd_filter_outbound | ternary('inet:' + rspamd_proxy_host + ':' + rspamd_proxy_port|string, None) }}"
  milter_mail_macros: "i {mail_addr} {client_addr} {client_name} {auth_authen}"

rspamd_spamassassin_config:
  - file: spamassassin.conf
    vars:
      ruleset: "{{ rspamd_spamassassin_rules_dir }}/*.cf"
      match_limit: 100k;
# rspamd config
config_files:
  - file: neural_group.conf
    vars:
      symbols:
        NEURAL_SPAM:
          weight: 3.0
        NEURAL_HAM:
          weight: -3.0
  - file: neural.conf
    vars:
      enabled: "{{ rspamd_enable_neural_training }}"
      servers: "localhost"
      dbname: "{{ rspamd_neural_db | default(2) }}"
  - file: reputation.conf
    vars:
      rules:
        ip_reputation:
          redis:
            servers: "{{ rspamd_redis_enabled | ternary(rspamd_redis_server, None) }}"
  - file: actions.conf
    vars:
      reject: "{{ rspamd_reject_score }}"
      add_header: "{{ rspamd_add_header_score }}"
      greylist: "{{ rspamd_greylist_score }}"
      subject: "{{ (rspamd_passive_learning_mode == 'piggyback') | ternary(null, '[SPAM] (%d) %s') }}"
  - file: worker-proxy.inc
    vars:
      bind_socket: "localhost:{{ rspamd_proxy_port }}"
      spam_header: 'X-Spam-Status'
  - file: worker-controller.inc
    vars:
      extended_spam_headers: true
      # Does this affect just outbound or inbound?
      quarantine_on_reject: false    
      count: "{{ rspamd_worker_process_count }}"
  - file: statistics.conf 
    vars:
      classifier:
        bayes:
          backend: "{{ rspamd_redis_enabled | ternary('redis', 'sqlite3') }}"
          autolearn: "true"
  - file: redis.conf
    vars:
      servers: "{{ rspamd_redis_enabled | ternary(rspamd_redis_server, None) }}"
  - file: worker-fuzzy.inc
    vars:
      backend: "{{ rspamd_redis_enabled | ternary('redis', 'sqlite3') }}"
      hash_file: "{{ rspamd_redis_enabled | ternary(omit, '${DBDIR}/fuzzy.db') }}"