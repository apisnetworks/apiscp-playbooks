---
- name: Install long-term kernel
  include_role: name=packages/install tasks_from=setup-channel.yml
  vars:
    rv:
      bootstrap:
        repo_rpm: "{{ kernel_repo_url }}"
        repo_key: "{{ kernel_repo_key }}"
      # defer to enable elrepo-kernel
      rpms: []
    channel: null
    notify: Reboot nag
  when: prefer_experimental_kernel

- name: Check if elrepo exists
  stat: path="{{ elrepo_repo_cfg }}"
  register: r

- name: "{{ prefer_experimental_kernel | ternary('Enable', 'Disable') }} EL-kernel repo"
  ini_file:
    path: "{{ elrepo_repo_cfg }}"
    section: elrepo-kernel
    option: enabled
    value: "{{ prefer_experimental_kernel | ternary(1, 0) }}"
  when: r.stat.exists

- block:
  - name: "Install {{ custom_kernel_rpm }}"
    yum: name="{{ custom_kernel_rpm }}" state=latest
    register: c
  - name: Query kernel version
    shell: >
      rpm -q "{{ custom_kernel_rpm }}" --queryformat="%{VERSION}-%{RELEASE}\n" | tail -n 1
    args:
      warn: false
    register: release
    changed_when: false
  - name: Get current kernel version
    command: uname -r
    changed_when: false
    register: curker
  - name: List all installed kernels
    shell: >
      rpm -q "{{ custom_kernel_rpm }}" --queryformat="%{VERSION}-%{RELEASE}\n" | sed '$d' | grep -vE "{{ release.stdout | regex_escape() }}|{{ curker.stdout | regex_replace('\.x86_64$', '') | regex_escape() }}"
    args:
      warn: false
    failed_when: false
    register: all
    changed_when: (all.stdout | trim) != ''
    when: (custom_kernel_remove_additional | bool)
  - name: Remove additional kernels
    yum: name='{{ (all.stdout | trim).split("\n") | map("regex_replace", "^", custom_kernel_rpm + "-")  | list }}' state=absent
    when: (custom_kernel_remove_additional | bool) and (all.stdout | trim) != ''
  - name: Enumerate kernels
    shell: >
      awk -F\' '/^menuentry / {print $2}' {{ grub_cfg }} |
      cat -n | awk '{print $1-1,$1="",$0}' | grep -F "{{ release.stdout }}" |
      awk  '{print $1}'
    register: idx
    failed_when: idx.stdout == ""
    changed_when: false
  - name: Change default kernel to {{ release.stdout }}
    command: >
      grub2-set-default "{{ idx.stdout | default(0) }}"
    when: -1 == curker.stdout.find(release.stdout)
  - debug: msg="Reboot to bring up new kernel"
  when: prefer_experimental_kernel
