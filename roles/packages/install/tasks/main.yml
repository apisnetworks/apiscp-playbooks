# Copyright (c) 2017 Apis Networks
# vim:ft=ansible:
---
- include_tasks: configure-default-vars.yml
# packages/install takes a very long time to run, can leave behind orphaned
# installs. Breaks Ansible
- name: "Install yum-utils"
  yum: name=yum-utils state=installed
- name: "Cleanup incomplete transactions"
  command: /usr/sbin/yum-complete-transaction --cleanup-only
  register: o
  changed_when: o.stdout.find("No unfinished transactions left.") == -1
- name: "Verify apnscp priority"
  ini_file:
    path: /etc/yum.repos.d/apnscp.repo
    section: apnscp
    option: priority
    value: 1
    state: present
  when: false
- name: "Install MariaDB"
  tags: ['install', 'sql', 'mysql']
  block:
    - stat: path=/etc/yum.repos.d/mariadb.repo
      register: mariadb_stat
    - template: src=mariadb.repo.j2 dest=/etc/yum.repos.d/mariadb.repo owner=root group=root mode=0644
      when: mariadb_stat is defined and mariadb_stat.stat.exists == False
      register: mariadb_repo

- name: "Remove MySQL/MariaDB system packages"
  yum: name="mariadb*,mysql*" state=absent
  when: mariadb_repo is defined and mariadb_repo.changed

- name: "Install PostgreSQL"
  block:
    - set_fact:
        # PostgreSQL packages are xx-<MAJOR><MINOR> sans period
        pgversion: "{{ pgsql_version | default(pgsql.default) }}"
        pg_pkgversion: '{{ pgsql_version | default(pgsql.default) | regex_replace("\.","") }}'
    - include_vars: "vars/rpms/pgdg.yml"
    - yum: name={{ repo_location[pgversion] }} state=present
      register: result
      until: result is succeeded
      retries: "{{ network_max_retries }}"
      # 2019/04/16 - RPM spec broken
    - name: Check if GPG key needs relink
      stat: path=/etc/pki/rpm-gpg/RPM-GPG-KEY-PGDG
      register: r
    - name: Link PGDG-{{pg_pkgversion}} to PGDG
      file:
        path: "/etc/pki/rpm-gpg/RPM-GPG-KEY-PGDG"
        state: link
        src: "/etc/pki/rpm-gpg/RPM-GPG-KEY-PGDG-{{ pg_pkgversion }}"
      when: not r.stat.exists
    - name: Validate if new repo format used
      stat: path="{{ repo_path }}"
      register: r
    - name: Disable all non-essential PostgreSQL repos
      ini_file:
        path: "{{ repo_path }}"
        section: 'pgdg{{ item | regex_replace("\.","")  }}'
        option: enabled
        value: "0"
      with_items:  "{{ repo_location.keys() | reject('match', '^' + pg_pkgversion + '$') | list }}"
      when: r.stat.exists
    - name: Enable PostgreSQL v{{ pgversion }} repo
      ini_file:
        path: "{{ repo_path }}"
        section: "pgdg{{ pg_pkgversion }}"
        option: enabled
        value: 1
      when: r.stat.exists
  tags: ['install', 'sql', 'pgsql']
- name: "Install MongoDB"
  tags: ['install', 'sql', 'mongodb']
  block:
    - stat: path=/etc/yum.repos.d/mongodb.repo
      register: mongodb_stat
    - template: src=mongodb.repo.j2 dest=/etc/yum.repos.d/mongodb.repo owner=root group=root mode=0644
      when: mongodb_stat is defined and mongodb_stat.stat.exists == False
  when: mongodb_enabled
- name: "Install CloudFlare"
  tags: ['cloudflare', 'apache']
  block:
    - stat: path=/etc/yum.repos.d/mod_cloudflare.repo
      register: cf_stat
    - yum:
        name: "http://pkg.cloudflare.com/cloudflare-release-latest.el{{ ansible_distribution_major_version }}.rpm"
        state: present
      register: result
      retries: "{{ network_max_retries }}"
      until: result is succeeded
      when:
        - cf_stat.stat is defined and not cf_stat.stat.exists

- name: "Install Google Pagespeed"
  tags: ['pagespeed', 'apache']
  block:
    - stat: path=/etc/yum.repos.d/mod-pagespeed.repo
      register: ps_stat
    - yum:
        # Installing mod-pagespeed automatically pulls in repo config
        name: "https://dl-ssl.google.com/dl/linux/direct/mod-pagespeed-stable_current_{{ ansible_machine }}.rpm"
        state: present
      register: result
      until: result is succeeded
      retries: "{{ network_max_retries }}"
      when: ps_stat.stat is defined and not ps_stat.stat.exists

- include_tasks: setup-channel.yml
  vars:
    channel: "{{ repo }}"
  tags: ["install"]
  with_items:
    - mariadb.yml
    - pgdg.yml
    - apnscp.yml
    - centos.yml
    - epel.yml
    - cloudflare.yml
    - mongodb.yml
    - remove.yml
  loop_control:
    loop_var: repo

#- name: Update all packages
#  yum: name=* state=latest
#  when: False
#
# @XXX 2.5.2 bug with appending to vars via set_fact
# https://github.com/ansible/ansible/pull/38302
#
- block:
  - name: Downgrade Ansible
    yum: name=ansible-2.4.2.0-2.el7 state=installed allow_downgrade=yes
  - include_role: name=common/fail-and-save
    vars:
      msg: |
          Ansible 2.5.1 is installed and has been downgraded automatically to
          2.4.2. A restart is necessary.

          See ansible/ansible#38271 for details of downgrade.
  when: ansible_version['full'] == "2.5.1"
