# /.socket doesn't copy-up, it's direct write. Put rbenv
# on a copy-up layer in FST to allow write-access by admin
# Downside is that anything root installs will also propagate
# to child nodes, so don't do that!
#
# rbenv forcefully overwrites a few things, including rbenv.sh
# and version (default_ruby) settings, so it always triggers
# idempotency violations; sorry!
---
- set_fact:
    __rbenv_version: "v{{ rbenv_version }}"
- name: Prepare {{ git_target }}
  file:
    path: "{{ git_target|dirname}}"
    state: directory
- name: Short-circuit rbenv idempotency
  stat: path={{ git_target }}/bin/rbenv
  register: r
- name: Install rbenv
  include_role: name="{{ role_path }}/../rbenv-support"
  vars:
    rbenv_root: "{{ apnscp_filesystem_template }}/{{rbenv_service_install }}/{{ git_target }}"
    rbenv_tmpdir: "{{ apnscp_root }}/storage/cache"
    rbenv:
      env: system
      default_ruby:
      version: "{{ __rbenv_version }}"
      rubies: []
  when: not (rbenv_idempotency_hotfix | default(true))  or not r.stat.exists
- name: Link {{ git_target }}
  file:
    path: "{{ git_target }}"
    src: "{{ apnscp_filesystem_template }}/{{rbenv_service_install }}/{{git_target}}"
    state: link
- name: Add GEM_HOME pathing support
  git:
    clone: yes
    repo: git://github.com/apisnetworks/rbenv-usergems
    dest: "{{ apnscp_filesystem_template }}/{{rbenv_service_install }}/{{git_target}}/plugins/rbenv-usergems"
    force: "{{ rbenv_usergems_force | default('yes') }}"
    version: "{{ rbenv_usergems_version | default('HEAD') }}"
# Run two separate rbenvs: system-wide and localized. System-wide is used by Passenger
# whereas localized allows users to create gem bundles within their home directory
- name: Get rbenv code - root
  command: "{{ git_target }}/bin/rbenv init -"
  environment:
    RBENV_ROOT: "{{ git_target }}"
  register: rbenv_code
  changed_when: false
- name: Create rbenv.sh - root
  copy:
    dest: "{{rbenv_script}}"
    content: |
      #!/bin/sh
      export RBENV_ROOT="{{ git_target }}"
      {{ rbenv_code.stdout }}
    mode: 0644
- name: Get rbenv code - non-root
  command: "{{ git_target }}/bin/rbenv usergems-init - | sed -e 's!\"/root!\"$HOME!g'"
  environment:
    RBENV_ROOT: "{{ git_target }}"
  register: rbenv_code
  changed_when: false
- name: Create rbenv.sh - non-root
  copy:
    dest: "{{ apnscp_filesystem_template }}/{{ rbenv_service_install }}/{{rbenv_script}}"
    content: |
      #!/bin/sh
      export RBENV_ROOT="{{ git_target }}"
      {{ rbenv_code.stdout | regex_replace('(PATH="/[^/]*(?<!\$HOME)/?\.rbenv-usergems/)', 'PATH="$HOME/.rbenv-usergems/') }}
    mode: 0644
  notify: Reload filesystem template
# End duplication
- name: Link rbenv to /usr/bin
  file:
    path: "/usr/bin/rbenv"
    src: "{{ git_target }}/bin/rbenv"
    state: link

- name: Add {{ git_target }} to wheel
  command: >
    find {{ git_target | quote }} -follow
      -iname ".git" -prune -o -not -group wheel
      -exec chgrp -c wheel {} +
  register: rbenv_chown
  changed_when: rbenv_chown.stdout != ""
- name: Ensure wheel has permissions to install binaries
  file:
    path: "{{ apnscp_filesystem_template }}/{{rbenv_service_install }}/{{git_target}}/{{ item }}"
    mode: g+rwx
    state: directory
    group: wheel
    owner: root
  with_items:
    - versions
    - shims
# Stolen from rbenv-support playbook, needs late init to correct path
- name: Check if current system ruby version is {{ sys_ruby_version }}
  shell: $SHELL -lc "{{ git_target }}/bin/rbenv version | cut -d ' ' -f 1 | grep -Fx '{{ sys_ruby_version }}'"
  register: ruby_selected
  changed_when: false
  ignore_errors: yes
  failed_when: false
  check_mode: no

- name: Set Ruby {{ sys_ruby_version }} for system
  become: yes
  shell: $SHELL -lc "{{ git_target }}/bin/rbenv global {{ sys_ruby_version }} && {{ git_target }}/bin/rbenv rehash"
  when:
    - ruby_selected.rc != 0

- name: Set defaults for /etc/gemrc
  include_role: name=apnscp/service-template
  vars:
    files:
      - content: |
          gem: --no-document -E
        service: ssh
        path: /etc/gemrc

- name: Symlink rbenv to {{git_target}}
  file:
    src: "{{ git_target }}/bin/rbenv"
    path: "{{ apnscp_filesystem_template }}/{{ rbenv_service_install }}/usr/bin/rbenv"
    state: link
- name: Set GEM_HOME
  lineinfile:
    path: "{{ apnscp_filesystem_template}}/siteinfo/etc/profile"
    line: 'export GEM_PATH="$GEM_PATH:$HOME/.gems"'
