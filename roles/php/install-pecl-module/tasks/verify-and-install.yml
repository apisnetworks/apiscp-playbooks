# Force PECL install with --extra-vars 'force_install'
---
- include_role:
    name: php/common
    tasks_from: query-extension-dir
- name: Register ini directory
  block:
    - command: "{{ phpconfig }} --php-binary"
      register: bin
      changed_when: false
    - command: "{{ bin.stdout }} -r 'print PHP_CONFIG_FILE_SCAN_DIR; exit(defined(\"PHP_CONFIG_FILE_SCAN_DIR\") ? 0 : 1);'"
      register: scandir
      changed_when: false
    - set_fact: scandir="{{scandir.stdout}}"
      changed_when: false
- name: Update channel protocols
  command: pecl channel-update pecl.php.net
  run_once: true
  register: output
  changed_when: "'up to date' not in output.stdout"
- name: Verify if PECL extension installed.
  vars: 
    modname: "{{ extension.extension | default(extension) | basename | regex_replace('^([^-.]+).*$', '\\1') }}"
  block: 
    - name: "Verify {{ modname }} module installed"
      stat: path="{{ php_module_directory }}/{{ modname }}.so"
      register: stres
    - name: "Build and install {{ modname }} library."
      command: "{{ role_path }}/files/installPecl.sh {{ extension.name | default(extension) }}"
      environment:
        PHPIZE: "{{ phpize }}"
        PHPCONFIG: "{{ phpconfig }}"
        XTRACFG: "{{ extra_flags }}"
        MAKEFLAGS: "-j{{ ansible_processor_vcpus }}"    
      notify: "{{ notify | default('Restart apache') }}"
      when: not stres.stat.exists or force is defined and force
      register: module_install
    - name: "Check if {{ modname }} loaded"
      command: >
        {{ bin.stdout }} -r 'exit(extension_loaded("{{ modname }}")^1);'
      register: extchk
      failed_when: false
      changed_when: extchk.rc != 0    
    - name: "Bypass individual ini file creation for {{ modname }}"
      set_fact: 
        __bypass_pecl_ini: "{{ extchk.rc == 0 | ternary(true, false) }}"
    - name: "Verify {{ scandir }}/{{modname}}.ini exists"
      stat:
        path: "{{ scandir }}/{{ modname }}.ini"
      register: st
      when: extchk.rc != 0
    - name: Add PECL module configuration
      copy: 
        dest: "{{ scandir }}/{{modname}}.ini"
        content: "extension={{modname}}.so\n"
      when: > 
        not (bypass_pecl_ini | default(__bypass_pecl_ini)) and
        module_install.changed and not st.stat.exists
        or force_module_rebuild
