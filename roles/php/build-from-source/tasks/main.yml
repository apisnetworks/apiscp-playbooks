---
- block:
    - name: Download PHP release feed
      uri: 
        url: "{{ php_xml_feed }}" 
        return_content: yes
      register: feed  
    - name: Find latest PHP version for "{{ php_version }}"
      xml:
        xmlstring: "{{ feed.content }}"
        xpath: "//ns:feed/ns:entry/php:version[starts-with(., '{{php_version}}.')]"      
        content: text
        namespaces:
          php: http://php.net/ns/releases
          ns: http://www.w3.org/2005/Atom
      register: vinfo
    - set_fact: php_version="{{ lookup('dict', vinfo.matches[0]).value }}"
  when: ((php_version | string ).split('.') | length) == 2

- stat: path="{{ build_dir }}"
  register: st
- stat: path="{{ php_configure }}"
  register: s1
- stat:
    path: "{{ php_bin }}"
  register: s2
- command: >
    {{ php_bin }} -r 'print(PHP_VERSION);'
  changed_when: false
  when: s2.stat.exists
  register: installed_php_version
- set_fact:
    do_install_php: >
      force or extra_flags or 
      installed_php_version.skipped is defined or 
      installed_php_version.stdout != php_version or 
      s1.stat.exists and s2.stat.exists and s1.stat.mtime > s2.stat.mtime
- name: Cleanup older PHPs
  find: 
    file_type: directory
    paths: "{{ work_dir }}"
    excludes: "php-{{php_version}}"
    patterns: "php-*"
  register: phps
- name: Remove older PHPs
  file:
    path: "{{item.path}}"
    state: absent
  with_items: "{{ phps.files }}"
- block:  
    - name: Download PHP {{ php_version }}
      unarchive:
        dest: "{{ work_dir }}"
        src: "http://php.net/get/php-{{ php_version }}.tar.bz2/from/this/mirror"
        remote_src: yes
      when: not st.stat.exists
    - name: Compile PHP {{ php_version }}      
      shell: "{{ php_configure }} {{ extra_flags }}"
      args:
        chdir: "{{ build_dir }}"       
      environment:
        SCANDIR: "{{ scan_dir }}"
    - make: 
        chdir: "{{ build_dir }}" 
        target: all 
        params:
          '--jobs': "{{ ansible_processor_vcpus | int }}"    
    - command: "strip {{ build_dir }}/.libs/libphp{{php_version | regex_replace('^(\\d+)\\..*$', '\\1') }}.so"
      when: not php_debug
    - make: chdir="{{ build_dir }}" target=install    
      notify: "{{ notify_handler }}"        
    - file: path="{{ scan_dir }}" state=directory 
  when: do_install_php

